{
  "address": "0xe12fe81F7dc4007f2A9Bb5C04Ec77330Ad44171E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptioId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__notEnoughEthForEntrance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__notOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        }
      ],
      "name": "Lottery__upkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "EnterLottery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "requestedLotteryWinner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequstConfiramtions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a27799d9c07269ff51a234cf1e63df51d518ed68a0d64cb7d8590ace316f043",
  "receipt": {
    "to": null,
    "from": "0x3Fd76dA46712fE7976aDFddE7bF7d06B2F702E97",
    "contractAddress": "0xe12fe81F7dc4007f2A9Bb5C04Ec77330Ad44171E",
    "transactionIndex": 15,
    "gasUsed": "1213691",
    "logsBloom": "0x
    "blockHash": "0xcf2eec99c5b84ed6de69d46c6c0d5ef3fa9055257ad88718da2b7cfd8b3b053b",
    "transactionHash": "0x0a27799d9c07269ff51a234cf1e63df51d518ed68a0d64cb7d8590ace316f043",
    "logs": [],
    "blockNumber": 10837087,
    "cumulativeGasUsed": "6220232",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "588",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "30",
    "100000000000000000",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "6419cb9092db2abc0dccc88a77b8e0b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptioId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__notEnoughEthForEntrance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__notOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"}],\"name\":\"Lottery__upkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"EnterLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestedLotteryWinner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequstConfiramtions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"It's using Chainlink VRF V2 and ChainLink keepers\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Lottery contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\n\\nerror Lottery__notEnoughEthForEntrance();\\nerror Lottery__TransferFailed();\\nerror Lottery__notOpen();\\nerror Lottery__upkeepNotNeeded(\\n    uint256 lotteryBalance,\\n    uint256 numPlayers,\\n    uint256 lotteryState\\n);\\n\\n/** \\n    @title Lottery contract\\n    @dev It's using Chainlink VRF V2 and ChainLink keepers\\n */\\n\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    /* Type declarations */\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    /* Storage variables */\\n    address payable[] s_players;\\n    address private s_recentWinner;\\n    uint256 private immutable i_entranceFee;\\n    uint256 private s_lastTimestamp;\\n    uint256 private immutable i_interval;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    LotteryState private s_lotteryState;\\n\\n    /* Events */\\n    event EnterLottery(address indexed playerAddress);\\n    event requestedLotteryWinner(uint256 indexed requestId);\\n    event WinnerPicked(address winner);\\n\\n    /* Functions */\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptioId,\\n        bytes32 gasLane,\\n        uint256 interval,\\n        uint256 entranceFee,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptioId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_lastTimestamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    /* View / Pure functions */\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 id) public view returns (address) {\\n        return s_players[id];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    function getNumWords() public pure returns (uint32) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimestamp;\\n    }\\n\\n    function getRequstConfiramtions() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    /* Write functions */\\n    function enterLottery() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Lottery__notEnoughEthForEntrance();\\n        }\\n        if (s_lotteryState != LotteryState.OPEN) {\\n            revert Lottery__notOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n\\n        emit EnterLottery(msg.sender);\\n    }\\n\\n    /* Chainlink VRF V2 functions implementations */\\n    function fulfillRandomWords(\\n        uint256, /*request_id */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexWinner];\\n        s_recentWinner = recentWinner;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimestamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Lottery__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    // Chainlink keeper functions\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = s_lotteryState == LotteryState.OPEN;\\n        bool timePassed = (block.timestamp - s_lastTimestamp) > i_interval;\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = isOpen && timePassed && hasPlayers && hasBalance;\\n    }\\n\\n    // This one triggers after checkUpkeep returns true\\n    function performUpkeep(\\n        bytes calldata /*performData*/\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Lottery__upkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_lotteryState)\\n            );\\n        }\\n        s_lotteryState = LotteryState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId, // contract that will fund subscription requests\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit requestedLotteryWinner(requestId);\\n    }\\n}\\n\",\"keccak256\":\"0xa9b288b4bd1b63be0bd3ea984d48d38347c4125086f207d721dfff6db596bbe2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001840380380620018408339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508160a081815250508573ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff1660601b815250508361014081815250508467ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508063ffffffff166101008163ffffffff1660e01b815250506000600360006101000a81548160ff021916908360018111156200011a57620001196200033c565b5b0217905550426002819055508260c081815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b600067ffffffffffffffff82169050919050565b620001c381620001a4565b8114620001cf57600080fd5b50565b600081519050620001e381620001b8565b92915050565b6000819050919050565b620001fe81620001e9565b81146200020a57600080fd5b50565b6000815190506200021e81620001f3565b92915050565b6000819050919050565b620002398162000224565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001d2565b9550506040620002f689828a016200020d565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000248565b92505060a06200032f89828a0162000289565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160e05160c01c6101005160e01c6101205160601c61014051611460620003e060003960006104960152600061045a015260006104da015260006104b70152600061063a0152600081816102b401526106b30152600081816102da015261032e01526114606000f3fe6080604052600436106100a75760003560e01c8063565429de11610064578063565429de146101aa5780636b68c03c146101d55780636e04ff0d146102005780637867d4531461023e578063c1af578514610269578063e55ae4e814610273576100a7565b806309bc33a7146100ac5780631fe543e3146100d7578063320229eb146101005780634585e33b1461012b578063473f1ddc1461015457806353a2c19a1461017f575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610b4c565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f99190610d00565b6102d8565b005b34801561010c57600080fd5b50610115610398565b6040516101229190610b4c565b60405180910390f35b34801561013757600080fd5b50610152600480360381019061014d9190610db7565b6103a2565b005b34801561016057600080fd5b506101696105a2565b6040516101769190610e45565b60405180910390f35b34801561018b57600080fd5b506101946105cc565b6040516101a19190610e7f565b60405180910390f35b3480156101b657600080fd5b506101bf6105d5565b6040516101cc9190610b4c565b60405180910390f35b3480156101e157600080fd5b506101ea6105e1565b6040516101f79190610f11565b60405180910390f35b34801561020c57600080fd5b5061022760048036038101906102229190610fe1565b6105f8565b6040516102359291906110cd565b60405180910390f35b34801561024a57600080fd5b506102536106a4565b6040516102609190610b4c565b60405180910390f35b6102716106b1565b005b34801561027f57600080fd5b5061029a600480360381019061029591906110fd565b610820565b6040516102a79190610e45565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161038192919061112a565b60405180910390fd5b6103948282610867565b5050565b6000600254905090565b60006103bc604051806020016040528060008152506105f8565b5090508061042b5747600080549050600360009054906101000a900460ff1660018111156103ed576103ec610e9a565b5b6040517fbcf5e91e00000000000000000000000000000000000000000000000000000000815260040161042293929190611153565b60405180910390fd5b6001600360006101000a81548160ff0219169083600181111561045157610450610e9a565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161051b9594939291906111e3565b602060405180830381600087803b15801561053557600080fd5b505af1158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d919061124b565b9050807f8436886e362e85384c64d5af46721d434cb451102c48870819d9f8420f55317660405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b60008080549050905090565b6000600360009054906101000a900460ff16905090565b60006060600080600181111561061157610610610e9a565b5b600360009054906101000a900460ff16600181111561063357610632610e9a565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261066791906112a7565b119050600080600080549050119050600080471190508380156106875750825b80156106905750815b80156106995750805b955050505050915091565b6000600361ffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561070b576040517ffe2a4aa300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561071f5761071e610e9a565b5b600360009054906101000a900460ff16600181111561074157610740610e9a565b5b14610778576040517fed918b3600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fde7ffaf8976e3b39d4fb74cd196ccae530bbcc6539e8f8e5db2cc61ef21b9ac260405160405180910390a2565b6000808281548110610835576108346112db565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808054905082600081518110610882576108816112db565b5b60200260200101516108949190611339565b905060008082815481106108ab576108aa6112db565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548160ff0219169083600181111561093f5761093e610e9a565b5b0217905550600067ffffffffffffffff81111561095f5761095e610bbd565b5b60405190808252806020026020018201604052801561098d5781602001602082028036833780820191505090505b50600090805190602001906109a3929190610a8c565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109d19061139b565b60006040518083038185875af1925050503d8060008114610a0e576040519150601f19603f3d011682016040523d82523d6000602084013e610a13565b606091505b5050905080610a4e576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df82604051610a7d919061140f565b60405180910390a15050505050565b828054828255906000526020600020908101928215610b05579160200282015b82811115610b045782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aac565b5b509050610b129190610b16565b5090565b5b80821115610b2f576000816000905550600101610b17565b5090565b6000819050919050565b610b4681610b33565b82525050565b6000602082019050610b616000830184610b3d565b92915050565b6000604051905090565b600080fd5b600080fd5b610b8481610b33565b8114610b8f57600080fd5b50565b600081359050610ba181610b7b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bf582610bac565b810181811067ffffffffffffffff82111715610c1457610c13610bbd565b5b80604052505050565b6000610c27610b67565b9050610c338282610bec565b919050565b600067ffffffffffffffff821115610c5357610c52610bbd565b5b602082029050602081019050919050565b600080fd5b6000610c7c610c7784610c38565b610c1d565b90508083825260208201905060208402830185811115610c9f57610c9e610c64565b5b835b81811015610cc85780610cb48882610b92565b845260208401935050602081019050610ca1565b5050509392505050565b600082601f830112610ce757610ce6610ba7565b5b8135610cf7848260208601610c69565b91505092915050565b60008060408385031215610d1757610d16610b71565b5b6000610d2585828601610b92565b925050602083013567ffffffffffffffff811115610d4657610d45610b76565b5b610d5285828601610cd2565b9150509250929050565b600080fd5b60008083601f840112610d7757610d76610ba7565b5b8235905067ffffffffffffffff811115610d9457610d93610d5c565b5b602083019150836001820283011115610db057610daf610c64565b5b9250929050565b60008060208385031215610dce57610dcd610b71565b5b600083013567ffffffffffffffff811115610dec57610deb610b76565b5b610df885828601610d61565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2f82610e04565b9050919050565b610e3f81610e24565b82525050565b6000602082019050610e5a6000830184610e36565b92915050565b600063ffffffff82169050919050565b610e7981610e60565b82525050565b6000602082019050610e946000830184610e70565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610eda57610ed9610e9a565b5b50565b6000819050610eeb82610ec9565b919050565b6000610efb82610edd565b9050919050565b610f0b81610ef0565b82525050565b6000602082019050610f266000830184610f02565b92915050565b600080fd5b600067ffffffffffffffff821115610f4c57610f4b610bbd565b5b610f5582610bac565b9050602081019050919050565b82818337600083830152505050565b6000610f84610f7f84610f31565b610c1d565b905082815260208101848484011115610fa057610f9f610f2c565b5b610fab848285610f62565b509392505050565b600082601f830112610fc857610fc7610ba7565b5b8135610fd8848260208601610f71565b91505092915050565b600060208284031215610ff757610ff6610b71565b5b600082013567ffffffffffffffff81111561101557611014610b76565b5b61102184828501610fb3565b91505092915050565b60008115159050919050565b61103f8161102a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561107f578082015181840152602081019050611064565b8381111561108e576000848401525b50505050565b600061109f82611045565b6110a98185611050565b93506110b9818560208601611061565b6110c281610bac565b840191505092915050565b60006040820190506110e26000830185611036565b81810360208301526110f48184611094565b90509392505050565b60006020828403121561111357611112610b71565b5b600061112184828501610b92565b91505092915050565b600060408201905061113f6000830185610e36565b61114c6020830184610e36565b9392505050565b60006060820190506111686000830186610b3d565b6111756020830185610b3d565b6111826040830184610b3d565b949350505050565b6000819050919050565b61119d8161118a565b82525050565b600067ffffffffffffffff82169050919050565b6111c0816111a3565b82525050565b600061ffff82169050919050565b6111dd816111c6565b82525050565b600060a0820190506111f86000830188611194565b61120560208301876111b7565b61121260408301866111d4565b61121f6060830185610e70565b61122c6080830184610e70565b9695505050505050565b60008151905061124581610b7b565b92915050565b60006020828403121561126157611260610b71565b5b600061126f84828501611236565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112b282610b33565b91506112bd83610b33565b9250828210156112d0576112cf611278565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061134482610b33565b915061134f83610b33565b92508261135f5761135e61130a565b5b828206905092915050565b600081905092915050565b50565b600061138560008361136a565b915061139082611375565b600082019050919050565b60006113a682611378565b9150819050919050565b6000819050919050565b60006113d56113d06113cb84610e04565b6113b0565b610e04565b9050919050565b60006113e7826113ba565b9050919050565b60006113f9826113dc565b9050919050565b611409816113ee565b82525050565b60006020820190506114246000830184611400565b9291505056fea26469706673582212202f259a70b5d7f0e4f470fbe1d93c2d15f421f9e5f19203cfe1e1fd39fafc9d9064736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063565429de11610064578063565429de146101aa5780636b68c03c146101d55780636e04ff0d146102005780637867d4531461023e578063c1af578514610269578063e55ae4e814610273576100a7565b806309bc33a7146100ac5780631fe543e3146100d7578063320229eb146101005780634585e33b1461012b578063473f1ddc1461015457806353a2c19a1461017f575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610b4c565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f99190610d00565b6102d8565b005b34801561010c57600080fd5b50610115610398565b6040516101229190610b4c565b60405180910390f35b34801561013757600080fd5b50610152600480360381019061014d9190610db7565b6103a2565b005b34801561016057600080fd5b506101696105a2565b6040516101769190610e45565b60405180910390f35b34801561018b57600080fd5b506101946105cc565b6040516101a19190610e7f565b60405180910390f35b3480156101b657600080fd5b506101bf6105d5565b6040516101cc9190610b4c565b60405180910390f35b3480156101e157600080fd5b506101ea6105e1565b6040516101f79190610f11565b60405180910390f35b34801561020c57600080fd5b5061022760048036038101906102229190610fe1565b6105f8565b6040516102359291906110cd565b60405180910390f35b34801561024a57600080fd5b506102536106a4565b6040516102609190610b4c565b60405180910390f35b6102716106b1565b005b34801561027f57600080fd5b5061029a600480360381019061029591906110fd565b610820565b6040516102a79190610e45565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161038192919061112a565b60405180910390fd5b6103948282610867565b5050565b6000600254905090565b60006103bc604051806020016040528060008152506105f8565b5090508061042b5747600080549050600360009054906101000a900460ff1660018111156103ed576103ec610e9a565b5b6040517fbcf5e91e00000000000000000000000000000000000000000000000000000000815260040161042293929190611153565b60405180910390fd5b6001600360006101000a81548160ff0219169083600181111561045157610450610e9a565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161051b9594939291906111e3565b602060405180830381600087803b15801561053557600080fd5b505af1158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d919061124b565b9050807f8436886e362e85384c64d5af46721d434cb451102c48870819d9f8420f55317660405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b60008080549050905090565b6000600360009054906101000a900460ff16905090565b60006060600080600181111561061157610610610e9a565b5b600360009054906101000a900460ff16600181111561063357610632610e9a565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261066791906112a7565b119050600080600080549050119050600080471190508380156106875750825b80156106905750815b80156106995750805b955050505050915091565b6000600361ffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561070b576040517ffe2a4aa300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561071f5761071e610e9a565b5b600360009054906101000a900460ff16600181111561074157610740610e9a565b5b14610778576040517fed918b3600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fde7ffaf8976e3b39d4fb74cd196ccae530bbcc6539e8f8e5db2cc61ef21b9ac260405160405180910390a2565b6000808281548110610835576108346112db565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808054905082600081518110610882576108816112db565b5b60200260200101516108949190611339565b905060008082815481106108ab576108aa6112db565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548160ff0219169083600181111561093f5761093e610e9a565b5b0217905550600067ffffffffffffffff81111561095f5761095e610bbd565b5b60405190808252806020026020018201604052801561098d5781602001602082028036833780820191505090505b50600090805190602001906109a3929190610a8c565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109d19061139b565b60006040518083038185875af1925050503d8060008114610a0e576040519150601f19603f3d011682016040523d82523d6000602084013e610a13565b606091505b5050905080610a4e576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df82604051610a7d919061140f565b60405180910390a15050505050565b828054828255906000526020600020908101928215610b05579160200282015b82811115610b045782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aac565b5b509050610b129190610b16565b5090565b5b80821115610b2f576000816000905550600101610b17565b5090565b6000819050919050565b610b4681610b33565b82525050565b6000602082019050610b616000830184610b3d565b92915050565b6000604051905090565b600080fd5b600080fd5b610b8481610b33565b8114610b8f57600080fd5b50565b600081359050610ba181610b7b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bf582610bac565b810181811067ffffffffffffffff82111715610c1457610c13610bbd565b5b80604052505050565b6000610c27610b67565b9050610c338282610bec565b919050565b600067ffffffffffffffff821115610c5357610c52610bbd565b5b602082029050602081019050919050565b600080fd5b6000610c7c610c7784610c38565b610c1d565b90508083825260208201905060208402830185811115610c9f57610c9e610c64565b5b835b81811015610cc85780610cb48882610b92565b845260208401935050602081019050610ca1565b5050509392505050565b600082601f830112610ce757610ce6610ba7565b5b8135610cf7848260208601610c69565b91505092915050565b60008060408385031215610d1757610d16610b71565b5b6000610d2585828601610b92565b925050602083013567ffffffffffffffff811115610d4657610d45610b76565b5b610d5285828601610cd2565b9150509250929050565b600080fd5b60008083601f840112610d7757610d76610ba7565b5b8235905067ffffffffffffffff811115610d9457610d93610d5c565b5b602083019150836001820283011115610db057610daf610c64565b5b9250929050565b60008060208385031215610dce57610dcd610b71565b5b600083013567ffffffffffffffff811115610dec57610deb610b76565b5b610df885828601610d61565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2f82610e04565b9050919050565b610e3f81610e24565b82525050565b6000602082019050610e5a6000830184610e36565b92915050565b600063ffffffff82169050919050565b610e7981610e60565b82525050565b6000602082019050610e946000830184610e70565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610eda57610ed9610e9a565b5b50565b6000819050610eeb82610ec9565b919050565b6000610efb82610edd565b9050919050565b610f0b81610ef0565b82525050565b6000602082019050610f266000830184610f02565b92915050565b600080fd5b600067ffffffffffffffff821115610f4c57610f4b610bbd565b5b610f5582610bac565b9050602081019050919050565b82818337600083830152505050565b6000610f84610f7f84610f31565b610c1d565b905082815260208101848484011115610fa057610f9f610f2c565b5b610fab848285610f62565b509392505050565b600082601f830112610fc857610fc7610ba7565b5b8135610fd8848260208601610f71565b91505092915050565b600060208284031215610ff757610ff6610b71565b5b600082013567ffffffffffffffff81111561101557611014610b76565b5b61102184828501610fb3565b91505092915050565b60008115159050919050565b61103f8161102a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561107f578082015181840152602081019050611064565b8381111561108e576000848401525b50505050565b600061109f82611045565b6110a98185611050565b93506110b9818560208601611061565b6110c281610bac565b840191505092915050565b60006040820190506110e26000830185611036565b81810360208301526110f48184611094565b90509392505050565b60006020828403121561111357611112610b71565b5b600061112184828501610b92565b91505092915050565b600060408201905061113f6000830185610e36565b61114c6020830184610e36565b9392505050565b60006060820190506111686000830186610b3d565b6111756020830185610b3d565b6111826040830184610b3d565b949350505050565b6000819050919050565b61119d8161118a565b82525050565b600067ffffffffffffffff82169050919050565b6111c0816111a3565b82525050565b600061ffff82169050919050565b6111dd816111c6565b82525050565b600060a0820190506111f86000830188611194565b61120560208301876111b7565b61121260408301866111d4565b61121f6060830185610e70565b61122c6080830184610e70565b9695505050505050565b60008151905061124581610b7b565b92915050565b60006020828403121561126157611260610b71565b5b600061126f84828501611236565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112b282610b33565b91506112bd83610b33565b9250828210156112d0576112cf611278565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061134482610b33565b915061134f83610b33565b92508261135f5761135e61130a565b5b828206905092915050565b600081905092915050565b50565b600061138560008361136a565b915061139082611375565b600082019050919050565b60006113a682611378565b9150819050919050565b6000819050919050565b60006113d56113d06113cb84610e04565b6113b0565b610e04565b9050919050565b60006113e7826113ba565b9050919050565b60006113f9826113dc565b9050919050565b611409816113ee565b82525050565b60006020820190506114246000830184611400565b9291505056fea26469706673582212202f259a70b5d7f0e4f470fbe1d93c2d15f421f9e5f19203cfe1e1fd39fafc9d9064736f6c63430008080033",
  "devdoc": {
    "details": "It's using Chainlink VRF V2 and ChainLink keepers",
    "kind": "dev",
    "methods": {},
    "title": "Lottery contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 234,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 236,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 240,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 260,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(LotteryState)231"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)231": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}